I"«<<p>I‚Äôve long been resistant to <a href="http://sass-lang.com/">Sass</a>. To me, it seemed like a complicated and superfluous layer of abstraction that would get in the way of how I usually write my CSS, and perhaps even create bloated, inefficient code ‚Äî boy, was I wrong.</p>

<p>As it turns out, Dan Cederholm had the <em>exact</em> same fear as I did about having to change the way he writes CSS, but the introduction to <a href="https://abookapart.com/products/sass-for-web-designers">his book</a> persuaded me to take a look at it:</p>

<blockquote>
  <p>But remember, since <strong>the SCSS syntax is a superset of CSS3</strong>, you don‚Äôt have to change anything about the way you write CSS. Commenting, indenting, or not indenting, all your formatting preferences can remain the same when working in .scss files. Once I realized this, I could dive in without fear.</p>

  <p><a href="http://alistapart.com/article/why-sass">Dan Cederholm, Sass for Web Designers (Chapter 1), 2013</a></p>
</blockquote>

<p>Now, I‚Äôve been using <a href="https://jekyllrb.com/">Jekyll</a>, the static site generator, for close to a year now, even for super simple sites. I really like how I‚Äôm able to keep my HTML <a href="https://en.wikipedia.org/wiki/Don%27t_repeat_yourself">DRY</a> by using imports, variables and layouts; it‚Äôs a system that makes any and all edits incredibly easy and sensible. In a sense, Sass is just the equivalent of Jekyll for CSS: I can import CSS from other files, use variables, and inject code into my predefined mixins, just like I can with HTML in Jekyll. And it turns out that my CSS doesn‚Äôt only get more maintainable, but I‚Äôve even found that my design as a whole gets better! Here‚Äôs how Sass has helped me out:</p>

<!-- More -->

<h2 id="variables-for-dry-and-systematic-code">Variables for DRY and systematic code</h2>
<p>One of the advantages of variables in any language whatsoever is of course that it can save you some typing while restricting all future changes to one point. For CSS, that means more maintainable and DRY code. As dull as that may sound, it‚Äôs actually quite agreeable.</p>

<p>But there‚Äôs more to it than that obvious feature. Just the addition of variables forces me to think within the system that I‚Äôve created. I have the bad habit of creating a new shade of gray whenever I need one; in a big CSS file, that easily becomes 6 or 7 shades, which just serves to confuse the reader. It may sound dumb, but having a <code class="highlighter-rouge">$light-gray</code> and a <code class="highlighter-rouge">$dark-gray</code> variable is something that has made it easier for me to stick to the system that I‚Äôve created. The same goes for predefined breakpoints, font sizes, line heights, standard transition times‚Ä¶ you name it. My design has gained in consistency thanks to Sass.</p>

<h2 id="mixins-for-readable-and-compatible-code">Mixins for readable and compatible code</h2>
<p>I haven‚Äôt really explored the world of mixin libraries just yet, but I‚Äôve already seen their potential just from the ones I‚Äôve written. Apart from drastically reducing the typing in some places, mixins make the code more readable. Assuming that the mixins and variables are predefined, I think this example will speak for itself; say we want to provide an image in a higher resolution for retina screens. The CSS might look like this:</p>

<figure class="highlight"><pre><code class="language-css" data-lang="css"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
</pre></td><td class="code"><pre><span class="nt">body</span> <span class="p">{</span>
    <span class="nl">background-image</span><span class="p">:</span> <span class="sx">url('/images/example.png')</span><span class="p">;</span>
<span class="p">}</span>

<span class="k">@media</span> <span class="p">(</span><span class="n">-webkit-min-device-pixel-ratio</span><span class="p">:</span> <span class="m">1.5</span><span class="p">),</span>
       <span class="p">(</span><span class="n">min--moz-device-pixel-ratio</span><span class="p">:</span> <span class="m">1.5</span><span class="p">),</span>
       <span class="p">(</span><span class="n">-o-min-device-pixel-r</span> <span class="n">atio</span><span class="p">:</span> <span class="m">3</span> <span class="p">/</span> <span class="m">2</span><span class="p">),</span>
       <span class="p">(</span><span class="n">min-device-pixel-ratio</span><span class="p">:</span> <span class="m">1.5</span><span class="p">),</span>
       <span class="p">(</span><span class="n">min-resolution</span><span class="p">:</span> <span class="m">1.5dppx</span><span class="p">)</span> <span class="p">{</span>
    <span class="nt">body</span> <span class="p">{</span>
        <span class="nl">background-image</span><span class="p">:</span> <span class="sx">url('/images/example_@2X.png')</span><span class="p">;</span>
        <span class="nl">background-size</span><span class="p">:</span> <span class="m">500px</span> <span class="m">500px</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></figure>

<p>Meanwhile, the SCSS is just this:</p>

<figure class="highlight"><pre><code class="language-scss" data-lang="scss"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
</pre></td><td class="code"><pre><span class="nt">body</span> <span class="p">{</span>
    <span class="nl">background-image</span><span class="p">:</span> <span class="nv">$background</span><span class="p">;</span>
    <span class="k">@include</span> <span class="nd">retina</span> <span class="p">{</span>
        <span class="nl">background-image</span><span class="p">:</span> <span class="nv">$background-2x</span><span class="p">;</span>
        <span class="nl">background-size</span><span class="p">:</span> <span class="m">500px</span> <span class="m">500px</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></figure>

<p>It‚Äôs much better!</p>

<p>The second way that mixins have proven themselves to be particularly useful is with all the damned vendor prefixes. Using mixins, it‚Äôs possible to refer to them all using a single line of code. See, this is the kind of abstraction that I was hoping for!</p>

<h2 id="imports-for-modular-and-performant-code">Imports for modular and performant code</h2>
<p>I‚Äôve always liked to keep different CSS files for different purposes. On this page, for instance, I‚Äôd have one for general styling, another for the typography, and a third one for code highlighting. It just makes sense to me to keep these things separate. The only problem is that in some larger projects, I may require part of one stylesheet in another. Now, we know better than to copy-paste the code from one place to another and call it a day; imports can help us with that!</p>

<p>Until <a href="https://www.youtube.com/watch?v=fJ0C4zN5uOQ">HTTP/2</a> becomes the norm, importing Sass files into eachother using <code class="highlighter-rouge">@import</code> is pretty much the simplest way to keep things modular on my end while keeping performance on the reader‚Äôs end in mind. Concatenating everything into one file admittedly breaks caching, but I still find it better than serving multiple files.</p>

<h3 id="speaking-of-performance">Speaking of performance‚Ä¶</h3>
<p>The cool thing about Sass is that it‚Äôs ‚Äújust‚Äù a preprocessor, meaning that it doesn‚Äôt really have an impact on the performance. I was afraid that Sass would create ugly CSS, but it turns out that as long you write sensible SCSS, your CSS will look just as fine.</p>

<p>My single gripe is that Sass doesn‚Äôt group media queries. I really like the way that Dan Cederholm writes his responsive declarations in his book: he uses a mixin that allows him to write declarations like these:</p>

<figure class="highlight"><pre><code class="language-scss" data-lang="scss"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
</pre></td><td class="code"><pre><span class="nt">p</span> <span class="p">{</span>
    <span class="nl">line-height</span><span class="p">:</span> <span class="m">1</span><span class="mi">.5</span><span class="p">;</span>
    <span class="k">@include</span> <span class="nd">responsive</span><span class="p">(</span><span class="n">medium-screens</span><span class="p">)</span> <span class="p">{</span>
        <span class="nl">line-height</span><span class="p">:</span> <span class="m">1</span><span class="mi">.4</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="k">@include</span> <span class="nd">responsive</span><span class="p">(</span><span class="n">small-screens</span><span class="p">)</span> <span class="p">{</span>
        <span class="nl">line-height</span><span class="p">:</span> <span class="m">1</span><span class="mi">.3</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="nt">article</span> <span class="p">{</span>
    <span class="nl">font-size</span><span class="p">:</span> <span class="m">1</span><span class="mi">.8rem</span><span class="p">;</span>
    <span class="k">@include</span> <span class="nd">responsive</span><span class="p">(</span><span class="n">medium-screens</span><span class="p">)</span> <span class="p">{</span>
        <span class="nl">font-size</span><span class="p">:</span> <span class="m">1</span><span class="mi">.6rem</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="k">@include</span> <span class="nd">responsive</span><span class="p">(</span><span class="n">small-screens</span><span class="p">)</span> <span class="p">{</span>
        <span class="nl">font-size</span><span class="p">:</span> <span class="m">1</span><span class="mi">.4rem</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></figure>

<p>Sadly, this compiles to the following code:</p>

<figure class="highlight"><pre><code class="language-scss" data-lang="scss"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
</pre></td><td class="code"><pre><span class="nt">p</span> <span class="p">{</span>
  <span class="nl">line-height</span><span class="p">:</span> <span class="m">1</span><span class="mi">.5</span><span class="p">;</span>
<span class="p">}</span>

<span class="k">@media</span> <span class="n">only</span> <span class="n">screen</span> <span class="nf">and</span> <span class="p">(</span><span class="n">max-width</span><span class="o">:</span> <span class="m">800px</span><span class="p">)</span> <span class="p">{</span>
  <span class="nt">p</span> <span class="p">{</span>
    <span class="nl">line-height</span><span class="p">:</span> <span class="m">1</span><span class="mi">.4</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="k">@media</span> <span class="n">only</span> <span class="n">screen</span> <span class="nf">and</span> <span class="p">(</span><span class="n">max-width</span><span class="o">:</span> <span class="m">500px</span><span class="p">)</span> <span class="p">{</span>
  <span class="nt">p</span> <span class="p">{</span>
    <span class="nl">line-height</span><span class="p">:</span> <span class="m">1</span><span class="mi">.3</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="nt">article</span> <span class="p">{</span>
  <span class="nl">font-size</span><span class="p">:</span> <span class="m">1</span><span class="mi">.8rem</span><span class="p">;</span>
<span class="p">}</span>

<span class="k">@media</span> <span class="n">only</span> <span class="n">screen</span> <span class="nf">and</span> <span class="p">(</span><span class="n">max-width</span><span class="o">:</span> <span class="m">800px</span><span class="p">)</span> <span class="p">{</span>
  <span class="nt">article</span> <span class="p">{</span>
    <span class="nl">font-size</span><span class="p">:</span> <span class="m">1</span><span class="mi">.6rem</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="k">@media</span> <span class="n">only</span> <span class="n">screen</span> <span class="nf">and</span> <span class="p">(</span><span class="n">max-width</span><span class="o">:</span> <span class="m">500px</span><span class="p">)</span> <span class="p">{</span>
  <span class="nt">article</span> <span class="p">{</span>
    <span class="nl">font-size</span><span class="p">:</span> <span class="m">1</span><span class="mi">.4rem</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></figure>

<p>Why Sass won‚Äôt group the media queries is beyond me. Even though it may not have much of a direct <a href="https://stackoverflow.com/questions/11626174/is-there-an-advantage-in-grouping-css-media-queries-together">impact on performance</a>, it‚Äôs not exactly elegant, and it does make for bigger files, which does slow down the page as a whole. I‚Äôm really hoping that what Cederholm calls ‚Äúaggregated media query bubbling‚Äù will make it into a future release of Sass ‚Äî it‚Äôs not like it‚Äôs <em>that</em> complicated to implement.</p>

<h2 id="integrating-it-into-a-jekyll-workflow">Integrating it into a Jekyll workflow</h2>
<p>As I mentioned earlier on, I like working with Jekyll. Luckily for me, Sass and Jekyll play very well together, since Jekyll comes with built-in Sass support. There‚Äôs not much to configure; here are the options that we can add to the <code class="highlighter-rouge">_config.yml</code> file:</p>

<figure class="highlight"><pre><code class="language-yaml" data-lang="yaml"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
</pre></td><td class="code"><pre><span class="na">sass</span><span class="pi">:</span>
    <span class="na">style</span><span class="pi">:</span> <span class="s">:compressed</span> <span class="c1"># Either :compressed or :expanded</span>
    <span class="na">sass_dir</span><span class="pi">:</span> <span class="s">_sass</span> <span class="c1"># This is the default value</span>
</pre></td></tr></tbody></table></code></pre></figure>

<p>The <code class="highlighter-rouge">sass_dir</code> is only used by Sass: the files that it contains won‚Äôt be in the final build; if you want to have a file be compiled, it needs to be somewhere else (I usually have them in a <code class="highlighter-rouge">css</code> folder placed at the root). But that‚Äôs as complicated as it gets! Jekyll takes care of the rest when it builds the site.</p>

<h2 id="conclusion">Conclusion</h2>
<p>I have nothing but good things to say about my transition to Sass. This idea of creating a language that is a superset of another language that the user already knows makes a lot of sense, since it greatly reduces initial reservations and other change aversions. The learning curve is incredibly gentle; you just need to pass the initial bump of giving it a try.</p>

<p>Sass fits nicely into my workflow, was really easy to learn, and makes writing good stylesheets a breeze. In the end, what‚Äôs not to love?</p>
:ET